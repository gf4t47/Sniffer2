// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cell.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cell.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMsg {

namespace {

const ::google::protobuf::Descriptor* Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_WindVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_WindVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_Wind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_Wind_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_Methane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_Methane_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cells_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cells_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CellTag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cell_2eproto() {
  protobuf_AddDesc_cell_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cell.proto");
  GOOGLE_CHECK(file != NULL);
  Coordinate_descriptor_ = file->message_type(0);
  static const int Coordinate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, coord_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, coord_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, coord_z_),
  };
  Coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coordinate_descriptor_,
      Coordinate::default_instance_,
      Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coordinate));
  Cell_descriptor_ = file->message_type(1);
  static const int Cell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, mtn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, wind_),
  };
  Cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell));
  Cell_WindVector_descriptor_ = Cell_descriptor_->nested_type(0);
  static const int Cell_WindVector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_WindVector, wv_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_WindVector, wv_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_WindVector, wv_z_),
  };
  Cell_WindVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_WindVector_descriptor_,
      Cell_WindVector::default_instance_,
      Cell_WindVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_WindVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_WindVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell_WindVector));
  Cell_Wind_descriptor_ = Cell_descriptor_->nested_type(1);
  static const int Cell_Wind_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Wind, wind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Wind, potential_),
  };
  Cell_Wind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_Wind_descriptor_,
      Cell_Wind::default_instance_,
      Cell_Wind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Wind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Wind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell_Wind));
  Cell_Methane_descriptor_ = Cell_descriptor_->nested_type(2);
  static const int Cell_Methane_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Methane, concentration_),
  };
  Cell_Methane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_Methane_descriptor_,
      Cell_Methane::default_instance_,
      Cell_Methane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Methane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell_Methane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell_Methane));
  Cells_descriptor_ = file->message_type(2);
  static const int Cells_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cells, cell_),
  };
  Cells_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cells_descriptor_,
      Cells::default_instance_,
      Cells_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cells, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cells, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cells));
  Map_descriptor_ = file->message_type(3);
  static const int Map_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, startindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, cells_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
  CellTag_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cell_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coordinate_descriptor_, &Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_WindVector_descriptor_, &Cell_WindVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_Wind_descriptor_, &Cell_Wind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_Methane_descriptor_, &Cell_Methane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cells_descriptor_, &Cells::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cell_2eproto() {
  delete Coordinate::default_instance_;
  delete Coordinate_reflection_;
  delete Cell::default_instance_;
  delete Cell_reflection_;
  delete Cell_WindVector::default_instance_;
  delete Cell_WindVector_reflection_;
  delete Cell_Wind::default_instance_;
  delete Cell_Wind_reflection_;
  delete Cell_Methane::default_instance_;
  delete Cell_Methane_reflection_;
  delete Cells::default_instance_;
  delete Cells_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
}

void protobuf_AddDesc_cell_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncell.proto\022\010ProtoMsg\"\?\n\nCoordinate\022\017\n\007"
    "coord_x\030\001 \002(\005\022\017\n\007coord_y\030\002 \002(\005\022\017\n\007coord_"
    "z\030\003 \002(\005\"\314\002\n\004Cell\022#\n\005coord\030\001 \002(\0132\024.ProtoM"
    "sg.Coordinate\022\036\n\003tag\030\002 \002(\0162\021.ProtoMsg.Ce"
    "llTag\022#\n\003mtn\030\003 \002(\0132\026.ProtoMsg.Cell.Metha"
    "ne\022!\n\004wind\030\004 \002(\0132\023.ProtoMsg.Cell.Wind\0326\n"
    "\nWindVector\022\014\n\004wv_x\030\001 \002(\001\022\014\n\004wv_y\030\002 \002(\001\022"
    "\014\n\004wv_z\030\003 \002(\001\032]\n\004Wind\022\'\n\004wind\030\001 \002(\0132\031.Pr"
    "otoMsg.Cell.WindVector\022,\n\tpotential\030\002 \002("
    "\0132\031.ProtoMsg.Cell.WindVector\032 \n\007Methane\022"
    "\025\n\rconcentration\030\001 \002(\001\"%\n\005Cells\022\034\n\004cell\030"
    "\001 \003(\0132\016.ProtoMsg.Cell\"w\n\003Map\022(\n\nstartInd"
    "ex\030\001 \002(\0132\024.ProtoMsg.Coordinate\022&\n\010bounda"
    "ry\030\002 \002(\0132\024.ProtoMsg.Coordinate\022\036\n\005cells\030"
    "\003 \002(\0132\017.ProtoMsg.Cells*,\n\007CellTag\022\007\n\003Air"
    "\020\001\022\n\n\006Ground\020\002\022\014\n\010Building\020\003B\002H\001", 632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cell.proto", &protobuf_RegisterTypes);
  Coordinate::default_instance_ = new Coordinate();
  Cell::default_instance_ = new Cell();
  Cell_WindVector::default_instance_ = new Cell_WindVector();
  Cell_Wind::default_instance_ = new Cell_Wind();
  Cell_Methane::default_instance_ = new Cell_Methane();
  Cells::default_instance_ = new Cells();
  Map::default_instance_ = new Map();
  Coordinate::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  Cell_WindVector::default_instance_->InitAsDefaultInstance();
  Cell_Wind::default_instance_->InitAsDefaultInstance();
  Cell_Methane::default_instance_->InitAsDefaultInstance();
  Cells::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cell_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cell_2eproto {
  StaticDescriptorInitializer_cell_2eproto() {
    protobuf_AddDesc_cell_2eproto();
  }
} static_descriptor_initializer_cell_2eproto_;
const ::google::protobuf::EnumDescriptor* CellTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellTag_descriptor_;
}
bool CellTag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Coordinate::kCoordXFieldNumber;
const int Coordinate::kCoordYFieldNumber;
const int Coordinate::kCoordZFieldNumber;
#endif  // !_MSC_VER

Coordinate::Coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coordinate::InitAsDefaultInstance() {
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coordinate::SharedCtor() {
  _cached_size_ = 0;
  coord_x_ = 0;
  coord_y_ = 0;
  coord_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coordinate::~Coordinate() {
  SharedDtor();
}

void Coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coordinate_descriptor_;
}

const Coordinate& Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Coordinate* Coordinate::default_instance_ = NULL;

Coordinate* Coordinate::New() const {
  return new Coordinate;
}

void Coordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coord_x_ = 0;
    coord_y_ = 0;
    coord_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 coord_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_x_)));
          set_has_coord_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coord_y;
        break;
      }

      // required int32 coord_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coord_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_y_)));
          set_has_coord_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coord_z;
        break;
      }

      // required int32 coord_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coord_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_z_)));
          set_has_coord_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 coord_x = 1;
  if (has_coord_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coord_x(), output);
  }

  // required int32 coord_y = 2;
  if (has_coord_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coord_y(), output);
  }

  // required int32 coord_z = 3;
  if (has_coord_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coord_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 coord_x = 1;
  if (has_coord_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coord_x(), target);
  }

  // required int32 coord_y = 2;
  if (has_coord_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coord_y(), target);
  }

  // required int32 coord_z = 3;
  if (has_coord_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coord_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 coord_x = 1;
    if (has_coord_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coord_x());
    }

    // required int32 coord_y = 2;
    if (has_coord_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coord_y());
    }

    // required int32 coord_z = 3;
    if (has_coord_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coord_z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coord_x()) {
      set_coord_x(from.coord_x());
    }
    if (from.has_coord_y()) {
      set_coord_y(from.coord_y());
    }
    if (from.has_coord_z()) {
      set_coord_z(from.coord_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other != this) {
    std::swap(coord_x_, other->coord_x_);
    std::swap(coord_y_, other->coord_y_);
    std::swap(coord_z_, other->coord_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coordinate_descriptor_;
  metadata.reflection = Coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cell_WindVector::kWvXFieldNumber;
const int Cell_WindVector::kWvYFieldNumber;
const int Cell_WindVector::kWvZFieldNumber;
#endif  // !_MSC_VER

Cell_WindVector::Cell_WindVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell_WindVector::InitAsDefaultInstance() {
}

Cell_WindVector::Cell_WindVector(const Cell_WindVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell_WindVector::SharedCtor() {
  _cached_size_ = 0;
  wv_x_ = 0;
  wv_y_ = 0;
  wv_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell_WindVector::~Cell_WindVector() {
  SharedDtor();
}

void Cell_WindVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cell_WindVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell_WindVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_WindVector_descriptor_;
}

const Cell_WindVector& Cell_WindVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Cell_WindVector* Cell_WindVector::default_instance_ = NULL;

Cell_WindVector* Cell_WindVector::New() const {
  return new Cell_WindVector;
}

void Cell_WindVector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wv_x_ = 0;
    wv_y_ = 0;
    wv_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell_WindVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double wv_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wv_x_)));
          set_has_wv_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_wv_y;
        break;
      }

      // required double wv_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wv_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wv_y_)));
          set_has_wv_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_wv_z;
        break;
      }

      // required double wv_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wv_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wv_z_)));
          set_has_wv_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell_WindVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double wv_x = 1;
  if (has_wv_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->wv_x(), output);
  }

  // required double wv_y = 2;
  if (has_wv_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wv_y(), output);
  }

  // required double wv_z = 3;
  if (has_wv_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->wv_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell_WindVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double wv_x = 1;
  if (has_wv_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->wv_x(), target);
  }

  // required double wv_y = 2;
  if (has_wv_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wv_y(), target);
  }

  // required double wv_z = 3;
  if (has_wv_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->wv_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell_WindVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double wv_x = 1;
    if (has_wv_x()) {
      total_size += 1 + 8;
    }

    // required double wv_y = 2;
    if (has_wv_y()) {
      total_size += 1 + 8;
    }

    // required double wv_z = 3;
    if (has_wv_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell_WindVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell_WindVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell_WindVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell_WindVector::MergeFrom(const Cell_WindVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wv_x()) {
      set_wv_x(from.wv_x());
    }
    if (from.has_wv_y()) {
      set_wv_y(from.wv_y());
    }
    if (from.has_wv_z()) {
      set_wv_z(from.wv_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell_WindVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell_WindVector::CopyFrom(const Cell_WindVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell_WindVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Cell_WindVector::Swap(Cell_WindVector* other) {
  if (other != this) {
    std::swap(wv_x_, other->wv_x_);
    std::swap(wv_y_, other->wv_y_);
    std::swap(wv_z_, other->wv_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell_WindVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_WindVector_descriptor_;
  metadata.reflection = Cell_WindVector_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Cell_Wind::kWindFieldNumber;
const int Cell_Wind::kPotentialFieldNumber;
#endif  // !_MSC_VER

Cell_Wind::Cell_Wind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell_Wind::InitAsDefaultInstance() {
  wind_ = const_cast< ::ProtoMsg::Cell_WindVector*>(&::ProtoMsg::Cell_WindVector::default_instance());
  potential_ = const_cast< ::ProtoMsg::Cell_WindVector*>(&::ProtoMsg::Cell_WindVector::default_instance());
}

Cell_Wind::Cell_Wind(const Cell_Wind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell_Wind::SharedCtor() {
  _cached_size_ = 0;
  wind_ = NULL;
  potential_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell_Wind::~Cell_Wind() {
  SharedDtor();
}

void Cell_Wind::SharedDtor() {
  if (this != default_instance_) {
    delete wind_;
    delete potential_;
  }
}

void Cell_Wind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell_Wind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_Wind_descriptor_;
}

const Cell_Wind& Cell_Wind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Cell_Wind* Cell_Wind::default_instance_ = NULL;

Cell_Wind* Cell_Wind::New() const {
  return new Cell_Wind;
}

void Cell_Wind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wind()) {
      if (wind_ != NULL) wind_->::ProtoMsg::Cell_WindVector::Clear();
    }
    if (has_potential()) {
      if (potential_ != NULL) potential_->::ProtoMsg::Cell_WindVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell_Wind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoMsg.Cell.WindVector wind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_potential;
        break;
      }

      // required .ProtoMsg.Cell.WindVector potential = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_potential:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_potential()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell_Wind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoMsg.Cell.WindVector wind = 1;
  if (has_wind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wind(), output);
  }

  // required .ProtoMsg.Cell.WindVector potential = 2;
  if (has_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->potential(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell_Wind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoMsg.Cell.WindVector wind = 1;
  if (has_wind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wind(), target);
  }

  // required .ProtoMsg.Cell.WindVector potential = 2;
  if (has_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->potential(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell_Wind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoMsg.Cell.WindVector wind = 1;
    if (has_wind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wind());
    }

    // required .ProtoMsg.Cell.WindVector potential = 2;
    if (has_potential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->potential());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell_Wind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell_Wind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell_Wind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell_Wind::MergeFrom(const Cell_Wind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wind()) {
      mutable_wind()->::ProtoMsg::Cell_WindVector::MergeFrom(from.wind());
    }
    if (from.has_potential()) {
      mutable_potential()->::ProtoMsg::Cell_WindVector::MergeFrom(from.potential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell_Wind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell_Wind::CopyFrom(const Cell_Wind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell_Wind::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_wind()) {
    if (!this->wind().IsInitialized()) return false;
  }
  if (has_potential()) {
    if (!this->potential().IsInitialized()) return false;
  }
  return true;
}

void Cell_Wind::Swap(Cell_Wind* other) {
  if (other != this) {
    std::swap(wind_, other->wind_);
    std::swap(potential_, other->potential_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell_Wind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_Wind_descriptor_;
  metadata.reflection = Cell_Wind_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Cell_Methane::kConcentrationFieldNumber;
#endif  // !_MSC_VER

Cell_Methane::Cell_Methane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell_Methane::InitAsDefaultInstance() {
}

Cell_Methane::Cell_Methane(const Cell_Methane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell_Methane::SharedCtor() {
  _cached_size_ = 0;
  concentration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell_Methane::~Cell_Methane() {
  SharedDtor();
}

void Cell_Methane::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cell_Methane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell_Methane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_Methane_descriptor_;
}

const Cell_Methane& Cell_Methane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Cell_Methane* Cell_Methane::default_instance_ = NULL;

Cell_Methane* Cell_Methane::New() const {
  return new Cell_Methane;
}

void Cell_Methane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    concentration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell_Methane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double concentration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &concentration_)));
          set_has_concentration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell_Methane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double concentration = 1;
  if (has_concentration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->concentration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell_Methane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double concentration = 1;
  if (has_concentration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->concentration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell_Methane::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double concentration = 1;
    if (has_concentration()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell_Methane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell_Methane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell_Methane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell_Methane::MergeFrom(const Cell_Methane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concentration()) {
      set_concentration(from.concentration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell_Methane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell_Methane::CopyFrom(const Cell_Methane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell_Methane::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cell_Methane::Swap(Cell_Methane* other) {
  if (other != this) {
    std::swap(concentration_, other->concentration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell_Methane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_Methane_descriptor_;
  metadata.reflection = Cell_Methane_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Cell::kCoordFieldNumber;
const int Cell::kTagFieldNumber;
const int Cell::kMtnFieldNumber;
const int Cell::kWindFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell::InitAsDefaultInstance() {
  coord_ = const_cast< ::ProtoMsg::Coordinate*>(&::ProtoMsg::Coordinate::default_instance());
  mtn_ = const_cast< ::ProtoMsg::Cell_Methane*>(&::ProtoMsg::Cell_Methane::default_instance());
  wind_ = const_cast< ::ProtoMsg::Cell_Wind*>(&::ProtoMsg::Cell_Wind::default_instance());
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell::SharedCtor() {
  _cached_size_ = 0;
  coord_ = NULL;
  tag_ = 1;
  mtn_ = NULL;
  wind_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell::~Cell() {
  SharedDtor();
}

void Cell::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
    delete mtn_;
    delete wind_;
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New() const {
  return new Cell;
}

void Cell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_coord()) {
      if (coord_ != NULL) coord_->::ProtoMsg::Coordinate::Clear();
    }
    tag_ = 1;
    if (has_mtn()) {
      if (mtn_ != NULL) mtn_->::ProtoMsg::Cell_Methane::Clear();
    }
    if (has_wind()) {
      if (wind_ != NULL) wind_->::ProtoMsg::Cell_Wind::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoMsg.Coordinate coord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tag;
        break;
      }

      // required .ProtoMsg.CellTag tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMsg::CellTag_IsValid(value)) {
            set_tag(static_cast< ::ProtoMsg::CellTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mtn;
        break;
      }

      // required .ProtoMsg.Cell.Methane mtn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mtn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mtn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wind;
        break;
      }

      // required .ProtoMsg.Cell.Wind wind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoMsg.Coordinate coord = 1;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coord(), output);
  }

  // required .ProtoMsg.CellTag tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tag(), output);
  }

  // required .ProtoMsg.Cell.Methane mtn = 3;
  if (has_mtn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mtn(), output);
  }

  // required .ProtoMsg.Cell.Wind wind = 4;
  if (has_wind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoMsg.Coordinate coord = 1;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coord(), target);
  }

  // required .ProtoMsg.CellTag tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tag(), target);
  }

  // required .ProtoMsg.Cell.Methane mtn = 3;
  if (has_mtn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mtn(), target);
  }

  // required .ProtoMsg.Cell.Wind wind = 4;
  if (has_wind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoMsg.Coordinate coord = 1;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }

    // required .ProtoMsg.CellTag tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

    // required .ProtoMsg.Cell.Methane mtn = 3;
    if (has_mtn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mtn());
    }

    // required .ProtoMsg.Cell.Wind wind = 4;
    if (has_wind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coord()) {
      mutable_coord()->::ProtoMsg::Coordinate::MergeFrom(from.coord());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_mtn()) {
      mutable_mtn()->::ProtoMsg::Cell_Methane::MergeFrom(from.mtn());
    }
    if (from.has_wind()) {
      mutable_wind()->::ProtoMsg::Cell_Wind::MergeFrom(from.wind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_coord()) {
    if (!this->coord().IsInitialized()) return false;
  }
  if (has_mtn()) {
    if (!this->mtn().IsInitialized()) return false;
  }
  if (has_wind()) {
    if (!this->wind().IsInitialized()) return false;
  }
  return true;
}

void Cell::Swap(Cell* other) {
  if (other != this) {
    std::swap(coord_, other->coord_);
    std::swap(tag_, other->tag_);
    std::swap(mtn_, other->mtn_);
    std::swap(wind_, other->wind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cells::kCellFieldNumber;
#endif  // !_MSC_VER

Cells::Cells()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cells::InitAsDefaultInstance() {
}

Cells::Cells(const Cells& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cells::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cells::~Cells() {
  SharedDtor();
}

void Cells::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cells::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cells::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cells_descriptor_;
}

const Cells& Cells::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Cells* Cells::default_instance_ = NULL;

Cells* Cells::New() const {
  return new Cells;
}

void Cells::Clear() {
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cells::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMsg.Cell cell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cells::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoMsg.Cell cell = 1;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cells::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoMsg.Cell cell = 1;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cells::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoMsg.Cell cell = 1;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cells::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cells* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cells*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cells::MergeFrom(const Cells& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cells::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cells::CopyFrom(const Cells& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cells::IsInitialized() const {

  for (int i = 0; i < cell_size(); i++) {
    if (!this->cell(i).IsInitialized()) return false;
  }
  return true;
}

void Cells::Swap(Cells* other) {
  if (other != this) {
    cell_.Swap(&other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cells::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cells_descriptor_;
  metadata.reflection = Cells_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kStartIndexFieldNumber;
const int Map::kBoundaryFieldNumber;
const int Map::kCellsFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
  startindex_ = const_cast< ::ProtoMsg::Coordinate*>(&::ProtoMsg::Coordinate::default_instance());
  boundary_ = const_cast< ::ProtoMsg::Coordinate*>(&::ProtoMsg::Coordinate::default_instance());
  cells_ = const_cast< ::ProtoMsg::Cells*>(&::ProtoMsg::Cells::default_instance());
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  startindex_ = NULL;
  boundary_ = NULL;
  cells_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
    delete startindex_;
    delete boundary_;
    delete cells_;
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cell_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_startindex()) {
      if (startindex_ != NULL) startindex_->::ProtoMsg::Coordinate::Clear();
    }
    if (has_boundary()) {
      if (boundary_ != NULL) boundary_->::ProtoMsg::Coordinate::Clear();
    }
    if (has_cells()) {
      if (cells_ != NULL) cells_->::ProtoMsg::Cells::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoMsg.Coordinate startIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boundary;
        break;
      }

      // required .ProtoMsg.Coordinate boundary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // required .ProtoMsg.Cells cells = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoMsg.Coordinate startIndex = 1;
  if (has_startindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->startindex(), output);
  }

  // required .ProtoMsg.Coordinate boundary = 2;
  if (has_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundary(), output);
  }

  // required .ProtoMsg.Cells cells = 3;
  if (has_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoMsg.Coordinate startIndex = 1;
  if (has_startindex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->startindex(), target);
  }

  // required .ProtoMsg.Coordinate boundary = 2;
  if (has_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boundary(), target);
  }

  // required .ProtoMsg.Cells cells = 3;
  if (has_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoMsg.Coordinate startIndex = 1;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startindex());
    }

    // required .ProtoMsg.Coordinate boundary = 2;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundary());
    }

    // required .ProtoMsg.Cells cells = 3;
    if (has_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startindex()) {
      mutable_startindex()->::ProtoMsg::Coordinate::MergeFrom(from.startindex());
    }
    if (from.has_boundary()) {
      mutable_boundary()->::ProtoMsg::Coordinate::MergeFrom(from.boundary());
    }
    if (from.has_cells()) {
      mutable_cells()->::ProtoMsg::Cells::MergeFrom(from.cells());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_startindex()) {
    if (!this->startindex().IsInitialized()) return false;
  }
  if (has_boundary()) {
    if (!this->boundary().IsInitialized()) return false;
  }
  if (has_cells()) {
    if (!this->cells().IsInitialized()) return false;
  }
  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    std::swap(startindex_, other->startindex_);
    std::swap(boundary_, other->boundary_);
    std::swap(cells_, other->cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsg

// @@protoc_insertion_point(global_scope)
